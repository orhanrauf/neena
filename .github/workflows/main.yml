# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions
# More info on Python, GitHub Actions, and Azure App Service: https://aka.ms/python-webapps-actions

name: Build and deploy Neena Core
on:
  workflow_dispatch:

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    environment: 
      name: dev
    steps:
    - name: Checkout code
      uses: actions/checkout@v2


          
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Init
      run: terraform init
      working-directory: infra
      env:
        ARM_CLIENT_ID: ${{ secrets.DEPLOYMENT_SP_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.DEPLOYMENT_SP_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.TENANT_ID }}

    - name: Terraform Apply
      id: terraform_apply
      run: |
        terraform apply -auto-approve -var-file="dev.tfvars"
        # echo "service_app_name=$(terraform output -raw service_app_name)" >> $GITHUB_ENV
        # echo "function_app_name=$(terraform output -raw function_app_name)" >> $GITHUB_ENV
        # echo "postgresql_server_name=$(terraform output -raw postgresql_server_name)" >> $GITHUB_ENV
        # echo "postgresql_database_name=$(terraform output -raw postgresql_database_name)" >> $GITHUB_ENV
        # echo "resource_group_name=$(terraform output -raw resource_group_name)" >> $GITHUB_ENV
        # echo "static_website_endpoint=$(terraform output -raw static_website_endpoint)" >> $GITHUB_ENV
      env:
        ARM_CLIENT_ID: ${{ secrets.DEPLOYMENT_SP_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.DEPLOYMENT_SP_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
        TF_VAR_psql_admin_username: ${{ secrets.PSQL_ADMIN_USERNAME }}
        TF_VAR_psql_admin_password: ${{ secrets.PSQL_ADMIN_PASSWORD }}
      working-directory: infra
      
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: |
          {
            "clientId": "${{ secrets.DEPLOYMENT_SP_CLIENT_ID }}",
            "clientSecret": "${{ secrets.DEPLOYMENT_SP_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.SUBSCRIPTION_ID }}",
            "tenantId": "${{ secrets.TENANT_ID }}"
          }

    - name: Get Public IP
      run: echo "RUNNER_IP=$(curl -s ifconfig.me)" >> $GITHUB_ENV

    - name: Update PostgreSQL Firewall Rule
      run: |
        az postgres server firewall-rule create \
          --resource-group ${{ env.resource_group_name }} \
          --server ${{ env.postgresql_server_name }} \
          --name AllowGitHubActions \
          --start-ip-address $RUNNER_IP \
          --end-ip-address $RUNNER_IP
      env:
        RUNNER_IP: ${{ env.RUNNER_IP }}

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9' # Set this to your Python version

    - name: Install Dependencies
      run: |
        pip install poetry
        poetry install
      

    - name: Run Alembic Migrations
      env:
        POSTGRES_USER: ${{ secrets.PSQL_ADMIN_USERNAME }}
        POSTGRES_PASSWORD: ${{ secrets.PSQL_ADMIN_PASSWORD }}
        POSTGRES_SERVER: ${{ steps.terraform_apply.outputs.postgresql_server_name }}
        POSTGRES_DB: ${{ steps.terraform_apply.outputs.postgresql_database_name }}
      run: |
        poetry run alembic upgrade head

    
  # build:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Set up Python version
  #       uses: actions/setup-python@v1
  #       with:
  #         python-version: '3.10'

  #     - name: Create and start virtual environment
  #       run: |
  #         python -m venv venv
  #         source venv/bin/activate
      
  #     - name: Install dependencies
  #       run: pip install -r requirements.txt
  #       working-directory: 'src'
        
  #     # Optional: Add step to run tests here (PyTest, Django test suites, etc.)
      
  #     - name: Upload artifact for deployment jobs
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: python-app
  #         path: |
  #           src
  #           !venv/

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   environment:
  #     name: 'Production'
  #     url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

  #   steps:
  #     - name: Download artifact from build job
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: python-app
  #         path: .
          
  #     - name: 'Deploy to Azure Web App'
  #       uses: azure/webapps-deploy@v2
  #       id: deploy-to-webapp
  #       with:
  #         app-name: 'mywebapp-sample'
  #         slot-name: 'Production'
  #         publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_D59AF6F7FC3548B0B22238403786E552 }}
