# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions
# More info on Python, GitHub Actions, and Azure App Service: https://aka.ms/python-webapps-actions

name: Build and deploy Neena Core
on:
  workflow_dispatch:

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    environment: 
      name: dev
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Init
      run: terraform init
      working-directory: infra
      env:
        ARM_CLIENT_ID: ${{ secrets.DEPLOYMENT_SP_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.DEPLOYMENT_SP_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.TENANT_ID }}

    - name: Terraform Apply
      id: terraform_apply
      run: |
        terraform apply -auto-approve -var-file="dev.tfvars"
        echo "service_app_name=$(terraform-bin output -raw service_app_name)" >> $GITHUB_ENV
        echo "function_app_name=$(terraform-bin output -raw function_app_name)" >> $GITHUB_ENV
        echo "postgresql_server_name=$(terraform-bin output -raw postgresql_server_name)" >> $GITHUB_ENV
        echo "postgresql_database_name=$(terraform-bin output -raw postgresql_database_name)" >> $GITHUB_ENV
        echo "resource_group_name=$(terraform-bin output -raw resource_group_name)" >> $GITHUB_ENV
        echo "static_website_endpoint=$(terraform-bin output -raw static_website_endpoint)" >> $GITHUB_ENV
        echo "postgresql_server_fqdn=$(terraform-bin output -raw postgresql_server_fqdn)" >> $GITHUB_ENV
        echo "static_website_blob_connection_string=$(terraform-bin output -raw static_website_blob_connection_string)" >> $GITHUB_ENV
        echo "service_app_base_url=$(terraform-bin output -raw service_app_base_url)" >> $GITHUB_ENV
      env:
        ARM_CLIENT_ID: ${{ secrets.DEPLOYMENT_SP_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.DEPLOYMENT_SP_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
        TF_VAR_psql_admin_username: ${{ secrets.PSQL_ADMIN_USERNAME }}
        TF_VAR_psql_admin_password: ${{ secrets.PSQL_ADMIN_PASSWORD }}
        TF_VAR_first_superuser: ${{ secrets.FIRST_SUPERUSER }}
        TF_VAR_first_superuser_password: ${{ secrets.FIRST_SUPERUSER_PASSWORD }}
      working-directory: infra

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: |
          {
            "clientId": "${{ secrets.DEPLOYMENT_SP_CLIENT_ID }}",
            "clientSecret": "${{ secrets.DEPLOYMENT_SP_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.SUBSCRIPTION_ID }}",
            "tenantId": "${{ secrets.TENANT_ID }}"
          }
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20.1.0' # Set this to your Node.js version
        
    - name: Install pnpm
      run: npm install -g pnpm

    - name: Build Vue Project
      run: |
        npm install -g tsx
        pnpm install ts-node
        pnpm install tsx
        pnpm install
        pnpm run build
      working-directory: ./frontend
      env: 
        VITE_APP_AUTH0_DOMAIN: ${{ secrets.VITE_APP_AUTH0_DOMAIN }}
        VITE_APP_AUTH0_CLIENT_ID: ${{ secrets.VITE_APP_AUTH0_CLIENT_ID }}
        VITE_APP_SERVER_URL: ${{ env.service_app_base_url }}

    - name: Deploy to Vue distribution Azure Blob Storage
      run: |
        cd ./frontend
        az storage blob upload-batch \
          -s dist \
          -d "$web" \ 
          --connection-string "${{ env.static_website_blob_connection_string }}"

    - name: Get Public IP
      run: echo "RUNNER_IP=$(curl -s ifconfig.me)" >> $GITHUB_ENV

    - name: Update PostgreSQL Firewall Rule
      run: |
        az postgres server firewall-rule create \
          --resource-group ${{ env.resource_group_name }} \
          --server ${{ env.postgresql_server_name }} \
          --name AllowGitHubActions \
          --start-ip-address $RUNNER_IP \
          --end-ip-address $RUNNER_IP
      env:
        RUNNER_IP: ${{ env.RUNNER_IP }}
          
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9' # Set this to your Python version

    - name: Install Dependencies
      run: |
        pip install poetry
        poetry install
      working-directory: backend

    - name: Run Alembic Migrations
      env:
        POSTGRES_USER: "${{ secrets.PSQL_ADMIN_USERNAME }}@${{ env.postgresql_server_fqdn }}"
        POSTGRES_PASSWORD: ${{ secrets.PSQL_ADMIN_PASSWORD }}
        POSTGRES_SERVER: ${{ env.postgresql_server_fqdn }}
        POSTGRES_DB: ${{ env.postgresql_database_name }}
        PYTHONPATH: "./backend"
      run: |
        poetry run alembic upgrade head
      working-directory: backend

    - name: Install dependencies
      run: |
        pip install poetry
        cd backend
        poetry install
    
    - name: Deploy App Service
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.service_app_name }}
        slot-name: 'production'  # Remove if not using deployment slots
        publish-profile: ${{ secrets.SVC_PUBLISH_PROFILE }}
        package: backend
